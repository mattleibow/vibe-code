@page "/"
@using WaterIntakeTracker.Services
@using WaterIntakeTracker.Models
@inject WaterIntakeService WaterService
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Water Intake Tracker</PageTitle>

<div class="water-tracker-container">
    <div class="header">
        <h1 class="title">üíß Water Intake Tracker</h1>
        <p class="subtitle">Stay hydrated and impress your boss!</p>
    </div>

    <div class="main-content">
        <!-- Progress Circle -->
        <div class="progress-section">
            <div class="progress-circle-container">
                <svg class="progress-circle" width="200" height="200" viewBox="0 0 200 200">
                    <!-- Background circle -->
                    <circle cx="100" cy="100" r="90" fill="none" stroke="#e0f7ff" stroke-width="10"/>
                    <!-- Progress circle -->
                    <circle cx="100" cy="100" r="90" fill="none" stroke="url(#gradient)" stroke-width="10"
                            stroke-dasharray="@GetCircumference()" stroke-dashoffset="@GetDashOffset()"
                            stroke-linecap="round" transform="rotate(-90 100 100)" class="progress-bar"/>
                    <!-- Gradient definition -->
                    <defs>
                        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color:#00bcd4;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:#0288d1;stop-opacity:1" />
                        </linearGradient>
                    </defs>
                </svg>
                
                <div class="progress-text">
                    <div class="glasses-count">@model.GlassesConsumed</div>
                    <div class="glasses-label">/ @model.DailyGoalGlasses glasses</div>
                    <div class="percentage">@(model.ProgressPercentage.ToString("F0"))%</div>
                    <div class="milliliters">@model.TotalMilliliters ml</div>
                </div>
            </div>

            @if (model.IsGoalReached)
            {
                <div class="goal-reached">
                    üéâ Daily goal reached! Excellent hydration! üéâ
                </div>
            }
        </div>

        <!-- Action Buttons -->
        <div class="buttons-section">
            <button class="btn btn-add" @onclick="AddGlass" disabled="@(model.GlassesConsumed >= 20)">
                <span class="btn-icon">ü•õ</span>
                <span class="btn-text">Add Glass</span>
                <span class="btn-subtext">(+250ml)</span>
            </button>

            <button class="btn btn-remove" @onclick="RemoveGlass" disabled="@(model.GlassesConsumed <= 0)">
                <span class="btn-icon">‚Ü©Ô∏è</span>
                <span class="btn-text">Undo</span>
                <span class="btn-subtext">Remove last</span>
            </button>

            <button class="btn btn-reset" @onclick="Reset">
                <span class="btn-icon">üîÑ</span>
                <span class="btn-text">Reset Day</span>
                <span class="btn-subtext">Start over</span>
            </button>
        </div>

        <!-- Stats Section -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-value">@model.TotalMilliliters ml</div>
                <div class="stat-label">Consumed Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@(model.DailyGoalMilliliters - model.TotalMilliliters) ml</div>
                <div class="stat-label">Remaining</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@model.DailyGoalMilliliters ml</div>
                <div class="stat-label">Daily Goal</div>
            </div>
        </div>
    </div>
</div>

<style>
    .water-tracker-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: white;
    }

    .header {
        text-align: center;
        margin-bottom: 30px;
    }

    .title {
        font-size: 2.5rem;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        background: linear-gradient(45deg, #fff, #e3f2fd);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .subtitle {
        font-size: 1.2rem;
        margin: 10px 0 0 0;
        opacity: 0.9;
        font-weight: 300;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 30px;
    }

    .progress-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .progress-circle-container {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .progress-circle {
        filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));
    }

    .progress-bar {
        transition: stroke-dashoffset 0.5s ease-in-out;
    }

    .progress-text {
        position: absolute;
        text-align: center;
        color: white;
    }

    .glasses-count {
        font-size: 3rem;
        font-weight: bold;
        line-height: 1;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .glasses-label {
        font-size: 1rem;
        opacity: 0.8;
        margin-bottom: 5px;
    }

    .percentage {
        font-size: 1.5rem;
        font-weight: 600;
        color: #e3f2fd;
    }

    .milliliters {
        font-size: 0.9rem;
        opacity: 0.7;
    }

    .goal-reached {
        background: linear-gradient(45deg, #4caf50, #8bc34a);
        padding: 15px 25px;
        border-radius: 25px;
        font-weight: bold;
        text-align: center;
        animation: pulse 2s infinite;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    .buttons-section {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .btn {
        background: rgba(255, 255, 255, 0.15);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        padding: 20px 25px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px;
        min-width: 120px;
        text-align: center;
    }

    .btn:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.25);
        border-color: rgba(255, 255, 255, 0.4);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .btn:active:not(:disabled) {
        transform: translateY(0);
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-icon {
        font-size: 2rem;
        margin-bottom: 5px;
    }

    .btn-text {
        font-weight: 600;
        font-size: 1rem;
    }

    .btn-subtext {
        font-size: 0.8rem;
        opacity: 0.8;
    }

    .btn-add {
        background: linear-gradient(145deg, rgba(33, 150, 243, 0.3), rgba(3, 169, 244, 0.3));
    }

    .btn-remove {
        background: linear-gradient(145deg, rgba(255, 152, 0, 0.3), rgba(255, 193, 7, 0.3));
    }

    .btn-reset {
        background: linear-gradient(145deg, rgba(158, 158, 158, 0.3), rgba(189, 189, 189, 0.3));
    }

    .stats-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        width: 100%;
        max-width: 500px;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 20px;
        text-align: center;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 5px;
        color: #e3f2fd;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.8;
    }

    @@media (max-width: 768px) {
        .water-tracker-container {
            padding: 15px;
        }

        .title {
            font-size: 2rem;
        }

        .buttons-section {
            flex-direction: column;
            width: 100%;
        }

        .btn {
            width: 100%;
            flex-direction: row;
            justify-content: center;
            gap: 15px;
        }

        .btn-icon {
            margin-bottom: 0;
        }

        .progress-circle {
            width: 180px;
            height: 180px;
        }
    }
</style>

@code {
    private WaterIntakeModel model = new();

    protected override void OnInitialized()
    {
        model = WaterService.GetModel();
        WaterService.OnStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        WaterService.OnStateChanged -= StateHasChanged;
    }

    private void AddGlass()
    {
        WaterService.AddGlass();
    }

    private void RemoveGlass()
    {
        WaterService.RemoveGlass();
    }

    private void Reset()
    {
        WaterService.Reset();
    }

    private string GetCircumference()
    {
        double radius = 90;
        double circumference = 2 * Math.PI * radius;
        return circumference.ToString("F2");
    }

    private string GetDashOffset()
    {
        double radius = 90;
        double circumference = 2 * Math.PI * radius;
        double progress = model.ProgressPercentage / 100.0;
        double offset = circumference * (1 - progress);
        return offset.ToString("F2");
    }
}
